package com.eastapps.meme_gen_server.domain;

// Generated Nov 10, 2012 3:21:20 PM by Hibernate Tools 3.4.0.CR1

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * Meme generated by hbm2java
 */
@Entity
@Table(name = "meme", catalog = "mgsdb")
public class Meme implements java.io.Serializable {

	private Integer id;
	private LvMemeType lvMemeType;
	private MemeBackground memeBackground;
	private Set<MemeText> memeTexts = new HashSet(0);
	private Set<SampleMeme> sampleMemes = new HashSet(0);

	public Meme() {
	}

	public Meme(LvMemeType lvMemeType, MemeBackground memeBackground, Set memeTexts, Set sampleMemes) {
		this.lvMemeType = lvMemeType;
		this.memeBackground = memeBackground;
		this.memeTexts = memeTexts;
		this.sampleMemes = sampleMemes;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "lv_meme_type_fk")
	public LvMemeType getLvMemeType() {
		return this.lvMemeType;
	}

	public void setLvMemeType(LvMemeType lvMemeType) {
		this.lvMemeType = lvMemeType;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "meme_background_fk")
	public MemeBackground getMemeBackground() {
		return this.memeBackground;
	}

	public void setMemeBackground(MemeBackground memeBackground) {
		this.memeBackground = memeBackground;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "meme")
	public Set<MemeText> getMemeTexts() {
		return this.memeTexts;
	}

	public void setMemeTexts(Set<MemeText> memeTexts) {
		this.memeTexts = memeTexts;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "meme")
	public Set<SampleMeme> getSampleMemes() {
		return this.sampleMemes;
	}

	public void setSampleMemes(Set<SampleMeme> sampleMemes) {
		this.sampleMemes = sampleMemes;
	}

	@Override
	public String toString() {
		final int maxLen = 10;
		StringBuilder builder = new StringBuilder();
		builder.append("Meme [id=");
		builder.append(id);
		builder.append(", lvMemeType=");
		builder.append(lvMemeType);
		builder.append(", memeBackground=");
		builder.append(memeBackground);
		builder.append(", memeTexts=");
		builder.append(memeTexts != null ? toString(memeTexts, maxLen) : null);
		builder.append(", sampleMemes=");
		builder.append(sampleMemes == null ? "NULL" : "NOT NULL");
		builder.append("]");
		return builder.toString();
	}

	private String toString(Collection<?> collection, int maxLen) {
		StringBuilder builder = new StringBuilder();
		builder.append("[");
		int i = 0;
		for (Iterator<?> iterator = collection.iterator(); iterator.hasNext() && i < maxLen; i++) {
			if (i > 0)
				builder.append(", ");
			builder.append(iterator.next());
		}
		builder.append("]");
		return builder.toString();
	}
	
	

}
