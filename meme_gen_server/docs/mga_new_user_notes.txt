// android side
if (server.getUserForInstallKey(getInstallKey()) == null) {
	// get new install key
	String installKey = server.getNewInstallKey();

	User user = initNewUser(installKey); // set username to the same thing as device key
	if (server.storeNewUser(installKey, user)) {
		storeInstallFile(installKey, user);
	}
 
}

public void storeInstallFile(String installKey, User u) {
	File installation = new File(context.getFilesDir(), "INSTALLATION");
	FileOutputStream out = new FileOutputStream(installation);

	// probably want to create a map with keys/values for
	// 'installKey' and 'user'

   	out.write(toJSON(installInfoMap).getBytes());
  	out.close();
}

public String getInstallKey() {
	String installKey = "";

	File installFile = new File(context.getFilesDir(), "INSTALLATION");
	if (installFile.exists) {
		RandomAccessFile raf = new RandomAccessFile(installFile, "r");
		byte[] bytes = new byte[(int) installFile.length()];
		raf.readFully(bytes);
		raf.close();
		
		String jsonInstallMap = new String(bytes);
		Map installMap = fromJSON(jsonInstallMap);
		installKey = installMap.get("installKey");
	}

	return installKey;
}




// server side
public String getNewInstallKey() {
	String key = UUID.randomUUID().toString();
	int id = database.storeUUID(key);

	while (database.deviceInfoTable.getById(id).size != 1) {
		key = UUID.randomUUID().toString();
		id = database.storeUUID(key);
	}

	return key;
}

public int storeNewUser(String installKey, User user) {
	int userId = -1;
	if (isInstallKeyValid(installKey)) {
    	int userId = database.storeUser(user);
	
		database.storeInstallKeyForUser(installKey, user);
	}

	return userId;
}

public boolean isInstallKeyValid(String installKey) {
	// check if exactly one install key exists,
	// and that the lastMod time is less than
	// 'deviceKeyExpireAge' (need to create this
	// configurable field)

}

